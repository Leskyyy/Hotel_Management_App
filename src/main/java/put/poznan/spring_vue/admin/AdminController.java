package put.poznan.spring_vue.admin;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import put.poznan.spring_vue.category.Category;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

@RestController // This means that this class is a Controller
@RequestMapping(path="/api/admin") // This means URL's start with /demo (after Application path)
public class AdminController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AdminRepository adminRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public ResponseEntity<Integer> addNewAdmin (@RequestParam("login") String login, @RequestParam("password") String password, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName) {
        try{
            List<Admin> existingAdmins = adminRepository.findByLogin(login);
            if(existingAdmins.isEmpty()){
                Admin _admin = new Admin();
                _admin.setLogin(login);
                _admin.setPassword(password);
                _admin.setFirstName(firstName);
                _admin.setLastName(lastName);
                _admin.setLastLogin(new Date());
                adminRepository.save(_admin);
                return new ResponseEntity<>(1, HttpStatus.CREATED);
            }
            return new ResponseEntity<>(0, HttpStatus.CONFLICT);
        } catch (Exception e){
            e.printStackTrace();
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping(path="/all")
    public @ResponseBody ResponseEntity<List<Admin>> getAllUsers(@RequestParam(name = "login", required = false) String login) {
        try {
            List<Admin> admins = new ArrayList<Admin>();
            if (login == null) {
                admins.addAll(adminRepository.findAll());
            } else {
                admins.addAll(adminRepository.findByLogin(login));
            }
            if (admins.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
            return new ResponseEntity<>(admins, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
    @PostMapping(path="/auth")
    public @ResponseBody ResponseEntity<Integer> authenticate(@RequestParam(name = "login") String login, @RequestParam(name = "password") String password) {
        try {
            List<Admin> admin = adminRepository.findByLogin(login);
            if (admin.isEmpty()) {
                return new ResponseEntity<>(0, HttpStatus.OK);
            } else {
                if (Objects.equals(admin.get(0).getPassword(), password)){
                    return new ResponseEntity<>(1, HttpStatus.OK);
                }
            }
            return new ResponseEntity<>(0, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
