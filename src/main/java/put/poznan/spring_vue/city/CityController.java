package put.poznan.spring_vue.city;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import put.poznan.spring_vue.category.Category;
import put.poznan.spring_vue.country.Country;

import java.util.ArrayList;
import java.util.List;

@RestController // This means that this class is a Controller
@RequestMapping(path="/api/city") // This means URL's start with /demo (after Application path)
public class CityController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CityRepository cityRepository;

    @PostMapping(path="/add")
    public ResponseEntity<Integer> addNewCity(@RequestParam("countryName") String countryName, @RequestParam("cityName") String cityName) {
        try{
            Country existingCountry = cityRepository.findCountryByCountryName(countryName);
            City existingCity = cityRepository.findCityByCityName(cityName);
            if(existingCity == null && existingCountry != null){
                City _city = new City();
                _city.setCityName(cityName);
                _city.setCountry(existingCountry);
                cityRepository.save(_city);
                return new ResponseEntity<>(1, HttpStatus.CREATED);
            }
            return new ResponseEntity<>(0, HttpStatus.CONFLICT);
        } catch (Exception e){
            e.printStackTrace();
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping(path="/all")
    public @ResponseBody ResponseEntity<List<City>> getAllCities() {
        try {
            List<City> cities = new ArrayList<City>();
            cities.addAll(cityRepository.findAll());
            if (cities.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
            return new ResponseEntity<>(cities, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}