package put.poznan.spring_vue.guest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import put.poznan.spring_vue.address.Address;
import put.poznan.spring_vue.reservation.ReservationGetter;
import put.poznan.spring_vue.room.Room;

import java.util.ArrayList;
import java.util.List;

@RestController // This means that this class is a Controller
@RequestMapping(path="/api/guest") // This means URL's start with /demo (after Application path)
public class GuestController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private GuestRepository guestRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public ResponseEntity<Integer> addNewGuest (@RequestBody GuestDetails guestDetails) {
        try{
            Address address = guestRepository.findAddressByID(guestDetails.getAddressID());
            Guest _guest = new Guest(guestDetails.getFirstName(), guestDetails.getLastName(), guestDetails.getTelephone(), guestDetails.getDateOfBirth(), address);
            _guest = guestRepository.save(_guest);
            return new ResponseEntity<>(_guest.getId(), HttpStatus.CREATED);
        } catch (Exception e){
            e.printStackTrace();
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping(path="/all")
    public @ResponseBody ResponseEntity<List<GuestGetter>> getAllGuests() {
        try {
            List<Guest> guests = new ArrayList<Guest>(guestRepository.findAll());
            List<GuestGetter> toReturn = new ArrayList<>();
            GuestGetter guestGetter;

            if (guests.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }

            for(int i=0; i<guests.size(); i++){
                guestGetter = new GuestGetter();
                guestGetter.setGuestID(guests.get(i).getId());
                guestGetter.setFirstName(guests.get(i).getFirstName());
                guestGetter.setLastName(guests.get(i).getLastName());
                guestGetter.setDateOfBirth(guests.get(i).getDateOfBirth());
                guestGetter.setTelephone(guests.get(i).getTelephone());
                guestGetter.setCity(guests.get(i).getAddress().getCity().getCityName());
                guestGetter.setCountry(guests.get(i).getAddress().getCity().getCountry().getCountryName());
                toReturn.add(guestGetter);
                guestGetter = null;
            }

            return new ResponseEntity<>(toReturn, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

}